service: uploadshare-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  environment:
    BUCKET_NAME: !Ref FileBucket
    BASE_URL: https://${self:custom.domainName}
    POWERTOOLS_SERVICE_NAME: uploadshare
    POWERTOOLS_METRICS_NAMESPACE: uploadshare

plugins:
  - serverless-plugin-log-retention
  - serverless-iam-roles-per-function

custom:
  logRetentionInDays: 7
  domainName: uploadshare.click

functions:
  createShare:
    handler: share-handler.handleEvent
    events:
      - httpApi:
          method: POST
          path: "/"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}/shares/*"
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}"

  download:
    handler: download.handleEvent
    events:
      - httpApi:
          method: GET
          path: "/{id}"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - !Sub "arn:aws:s3:::${FileBucket}/shares/*"

resources:
  Resources:
    CustomDomain:
      Type: AWS::ApiGatewayV2::DomainName
      Properties:
        DomainName: ${self:custom.domainName}
        DomainNameConfigurations:
          - CertificateArn: ${cf:uploadshare-domain-${sls:stage}.DomainCertArn}

    DomainRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${cf:uploadshare-domain-${sls:stage}.PublicHostedZone}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              DNSName: !GetAtt CustomDomain.RegionalDomainName
              HostedZoneId: !GetAtt CustomDomain.RegionalHostedZoneId
          - Name: ${self:custom.domainName}
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt CustomDomain.RegionalDomainName
              HostedZoneId: !GetAtt CustomDomain.RegionalHostedZoneId

    CustomDamainPathMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        ApiId: !Ref HttpApi
        ApiMappingKey: "share"
        DomainName: !Ref CustomDomain
        Stage: !Ref HttpApiStage

    FileBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${file(./unique-bucket-name.cjs):bucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true
